version: '3.8'

services:
  # API Gateway - Routes requests to appropriate services
  api-gateway:
    build: ./api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    env_file: .env
    depends_on:
      - document-processor
      - embedding-service
      - sparse-retrieval
      - dense-retrieval
      - graph-retrieval
      - hybrid-search
      - reranker
      - query-transform
      - rag-generation
      - evaluation
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Document Processing Service
  document-processor:
    build: ./services/document-processor
    ports:
      - "${DOCUMENT_PROCESSOR_PORT:-8001}:8001"
    env_file: .env
    volumes:
      - ./data:/data:rw
      - ./temp:/tmp:rw
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Embedding Service
  embedding-service:
    build: ./services/embedding
    ports:
      - "${EMBEDDING_SERVICE_PORT:-8002}:8002"
    env_file: .env
    volumes:
      - ./models:/models:ro
    networks:
      - rag-network
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sparse Retrieval Service (BM25, SPLADE)
  sparse-retrieval:
    build: ./services/sparse-retrieval
    ports:
      - "${SPARSE_RETRIEVAL_PORT:-8003}:8003"
    env_file: .env
    depends_on:
      - elasticsearch
      - redis
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dense Retrieval Service (Vector Search)
  dense-retrieval:
    build: ./services/dense-retrieval
    ports:
      - "${DENSE_RETRIEVAL_PORT:-8004}:8004"
    env_file: .env
    depends_on:
      - milvus
      - redis
    networks:
      - rag-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Graph Retrieval Service
  graph-retrieval:
    build: ./services/graph-retrieval
    ports:
      - "${GRAPH_RETRIEVAL_PORT:-8005}:8005"
    env_file: .env
    depends_on:
      - neo4j
      - redis
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hybrid Search Orchestrator
  hybrid-search:
    build: ./services/hybrid-search
    ports:
      - "${HYBRID_SEARCH_PORT:-8006}:8006"
    env_file: .env
    depends_on:
      - sparse-retrieval
      - dense-retrieval
      - graph-retrieval
      - redis
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reranker Service
  reranker:
    build: ./services/reranker
    ports:
      - "${RERANKER_SERVICE_PORT:-8007}:8007"
    env_file: .env
    depends_on:
      - redis
    networks:
      - rag-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Query Transform Service
  query-transform:
    build: ./services/query-transform
    ports:
      - "${QUERY_TRANSFORM_PORT:-8008}:8008"
    env_file: .env
    depends_on:
      - redis
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Generation Service
  rag-generation:
    build: ./services/rag-generation
    ports:
      - "${RAG_GENERATION_PORT:-8009}:8009"
    env_file: .env
    depends_on:
      - hybrid-search
      - reranker
      - query-transform
      - redis
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Evaluation Service
  evaluation:
    build: ./services/evaluation
    ports:
      - "${EVALUATION_SERVICE_PORT:-8010}:8010"
    env_file: .env
    depends_on:
      - redis
      - postgres
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Stores
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  milvus:
    image: milvusdb/milvus:v2.3.0
    command: ["milvus", "run", "standalone"]
    ports:
      - "${MILVUS_PORT:-19530}:19530"
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    networks:
      - rag-network

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    command: minio server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  neo4j:
    image: neo4j:5.13-community
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rag_evaluation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rag-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rag-network
    depends_on:
      - prometheus

networks:
  rag-network:
    driver: bridge

volumes:
  elasticsearch_data:
  milvus_data:
  etcd_data:
  minio_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: